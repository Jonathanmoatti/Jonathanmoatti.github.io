{
  "hash": "b0cf0b1c17e3b6068ff7759a4a0b571f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Quarto Basics\"\nauthor: \"Jonathan Moatti\"\ndate: \"2025-02-20\"\ncategories: [news, code]\nformat:\n  html:\n    code-fold: true\n    css: \"styles.css\"\njupyter: python3\n---\n\n\n\n\n## Half-Moon Classification Example\n\nFor a demonstration of a line plot on a polar axis, see @fig-classif\n\n::: {#cell-fig-classif .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_moons\n\n# Create figure and axis objects with a single subplot\nplt.figure(figsize=(8, 6))\n\n# Generate the moon-shaped data\nX, y = make_moons(n_samples=200, noise=0.05, random_state=42)\n\n# Create scatter plots with improved styling\nplt.scatter(X[y==0, 0], X[y==0, 1], color='red', label='Class 0', alpha=0.6, edgecolor='darkred')\nplt.scatter(X[y==1, 0], X[y==1, 1], color='blue', label='Class 1', alpha=0.6, edgecolor='darkblue')\n\n# Add labels and title\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Half-moon Classification Dataset')\n\n# Add legend with better positioning\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout to prevent label cutoff\nplt.tight_layout()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Non-linear classification example using half-moon data](hello_files/figure-html/fig-classif-output-1.png){#fig-classif width=755 height=566 fig-align='center'}\n:::\n:::\n\n\n",
    "supporting": [
      "hello_files"
    ],
    "filters": [],
    "includes": {}
  }
}