[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gradient Dissent",
    "section": "",
    "text": "Solutions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Basics\n\n\n\n\n\n\nnews\n\n\ncode\n\n\n\n\n\n\n\n\n\nFeb 20, 2025\n\n\nJonathan Moatti\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 19, 2025\n\n\nJonathan Moatti\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To Jo’s blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 16, 2025\n\n\nJonathan Moatti\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To Jo’s blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "posts/new_test_post/hello.html",
    "href": "posts/new_test_post/hello.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_moons\n\n# Create figure and axis objects with a single subplot\nplt.figure(figsize=(8, 6))\n\n# Generate the moon-shaped data\nX, y = make_moons(n_samples=200, noise=0.05, random_state=42)\n\n# Create scatter plots with improved styling\nplt.scatter(X[y==0, 0], X[y==0, 1], color='red', label='Class 0', alpha=0.6, edgecolor='darkred')\nplt.scatter(X[y==1, 0], X[y==1, 1], color='blue', label='Class 1', alpha=0.6, edgecolor='darkblue')\n\n# Add labels and title\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Half-moon Classification Dataset')\n\n# Add legend with better positioning\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout to prevent label cutoff\nplt.tight_layout()\n\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Non-linear classification example using half-moon data"
  },
  {
    "objectID": "posts/new_test_post/hello.html#half-moon-classification-example",
    "href": "posts/new_test_post/hello.html#half-moon-classification-example",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_moons\n\n# Create figure and axis objects with a single subplot\nplt.figure(figsize=(8, 6))\n\n# Generate the moon-shaped data\nX, y = make_moons(n_samples=200, noise=0.05, random_state=42)\n\n# Create scatter plots with improved styling\nplt.scatter(X[y==0, 0], X[y==0, 1], color='red', label='Class 0', alpha=0.6, edgecolor='darkred')\nplt.scatter(X[y==1, 0], X[y==1, 1], color='blue', label='Class 1', alpha=0.6, edgecolor='darkblue')\n\n# Add labels and title\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Half-moon Classification Dataset')\n\n# Add legend with better positioning\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout to prevent label cutoff\nplt.tight_layout()\n\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Non-linear classification example using half-moon data"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "👋 Hey there! I’m Jonathan. Passionate about artificial intelligence and data science, I love exploring the intersection between academic research and real-world applications. My journey has led me to work in AI R&D in North America’s largest financial cooperative (Desjardins), tackling exciting topics like recommendation systems, reinforcement learning, graph neural networks, and self-supervised learning. But beyond algorithms, what truly drives me is sharing knowledge.\nThat’s why I started Gradient Dissent—a blog where I walk through entry-level ideas, break down complex AI concepts, share my thoughts on the field, and maybe, just maybe, challenge conventional wisdom along the way. Why the name? Well, machine learning aficionados are quite familiar with a certain algorithm that methodically fine-tunes models step by step… But me? I like to question, challenge, and sometimes outright disagree with the status quo—hence Gradient Dissent. A little stubbornness never hurt anyone, right? 😄\nI’ve had the opportunity to teach programming at the HEC Montreal and develop advanced AI training programs. My goal? To make complex concepts accessible and help students, researchers, and professionals navigate this ever-evolving field. I thrive on bridging the gap between theory and practice, supporting learners of all levels in mastering machine learning.\nSo, whether you’re here out of curiosity, passion, or professional interest, welcome to Gradient Dissent! Expect deep dives, fresh insights, and the occasional rebellious take on AI. 🚀"
  },
  {
    "objectID": "posts/testing/solutions.html",
    "href": "posts/testing/solutions.html",
    "title": "Solutions",
    "section": "",
    "text": "Écrire un programme qui demande un nombre à l’utilisateur, et l’informe ensuite si ce nombre est positif ou négatif. (Aux fins du présent exercice, le nombre zéro est considéré comme étant positif).\n\n#Solution 1\nnb = int(input(\"Un nombre ? \"))\n\nif nb&lt;0 :\n    print(f\"Le nombre {nb} est négatif\")\nelse :\n    print(f\"Le nombre {nb} est positif\")\n\nUn nombre ? -1\nLe nombre -1 est négatif\n\n\n\n#Solution 2\nnb = int(input(\"Un nombre ? \"))\n\nif nb&lt;0 :\n    msg = \"négatif\"\nelse :\n    msg = \"positif\"\n\nprint(f\"Le nombre {nb} est {msg}\")\n\n# comparer les deux solutions en terme de performance et maintenance du code afin de les sensibiliser \n\nUn nombre ? 0\nLe nombre 0 est positif\n\n\n\n\n\nÉcrire un programme qui lit trois nombres entiers nb1, nb2 et nb3, et affiche selon le cas, l’un des trois messages ci-dessous : - Les nombres sont en ordre croissant - Les nombres sont en ordre décroissant - Les nombres sont en désordre\naux fins du présent exércice, ne considérons pas l’éventualité où les valeurs de nb1, nb2 et nb3 puissent être égales les unes aux autres.\n\n#Solution 1\nnb1 = int(input(\"nb 1 ? \"))\nnb2 = int(input(\"nb 2 ? \"))\nnb3 = int(input(\"nb 3 ? \"))\n\nchaine = \"Les nombres sont en \"\nif nb1 &lt; nb2:\n    if nb2 &lt; nb3:\n        chaine += \"ordre croissant\"\n    else:\n        chaine += \"désordre\"\nelse:\n    if nb2 &lt; nb3 :\n        chaine += \"désordre\"\n    else:\n        chaine += \"ordre décroissant\"\n\nprint(chaine)\n\nnb 1 ? 10\nnb 2 ? 20\nnb 3 ? 30\nLes nombres sont en ordre croissant\n\n\n\n#Solution 2\nnb1 = int(input(\"nb 1 ? \"))\nnb2 = int(input(\"nb 2 ? \"))\nnb3 = int(input(\"nb 3 ? \"))\n\nchaine = \"Les nombres sont en \"\nif nb1 &lt; nb2 and nb2 &lt; nb3 :\n    chaine += \"ordre croissant\"\nelif nb1 &gt; nb2 and nb2 &gt; nb3 :\n    chaine += \"ordre décroissant\"\nelse:\n    chaine += \"désordre\"\n\nprint(chaine)\n# comparer les deux solutions en terme de performance et maintenance du code afin de les sensibiliser \n\nnb 1 ? 10\nnb 2 ? 20\nnb 3 ? 30\nLes nombres sont en ordre croissant\n\n\n\n\n\nÉcrire un programme qui permet de calculer le résultat de la division de deux nombre entiers nb1 et nb2. Attention lorsque l’utilisateur introduit la valeur 0 pour nb2, on affiche « infini ».\n\n# print(10/0)\n\nnb1 = int(input(\"nb 1 ? \"))\nnb2 = int(input(\"nb 2 ? \"))\n\nif(nb2 == 0) :\n    resultat = \"infinity\"\nelse :\n    resultat = (nb1/nb2)\n\nprint(f\"{nb1} / {nb2} = {resultat}\")\n\nnb 1 ? 10\nnb 2 ? 0\n10 / 0 = infinity\n\n\n\n\n\nÉcrire le programme qui après lecture du montant TTC de l’addition, déterminera et affichera le montant du pourboire accordé à un serveur dans un restaurant. Le pourboire doit être de 15% sur le montant HT de l’addition. Le montant du pourboire ne peut être inférieur à 1$.\nNote : TPS = 5%, TVQ = 9.975%\n\n#constantes symboliques / éviter les constances littérales dans le code\nTAUX_TPS       = .05\nTAUX_TVQ       = .09975\nTAUX_POURBOIRE = .15\n\n#variables\nmontantTotal   = float(input(\"Le montant total de la facture ? \"))\nmontantAT      = montantTotal / (1+TAUX_TPS+TAUX_TVQ)\n# print(montantAT)\n\npourboire      = montantAT * TAUX_POURBOIRE\n\nif pourboire &lt; 1 :\n    pourboire = 1\n\nprint(f\"Montant du pourboire : {round(pourboire,2)}\")\nprint(f\"Montant du pourboire : {pourboire:.2f}\") #expliquer la différence\n\nLe montant total de la facture ? 115\nMontant du pourboire : 15.0\nMontant du pourboire : 15.00"
  },
  {
    "objectID": "posts/testing/solutions.html#question-1.a",
    "href": "posts/testing/solutions.html#question-1.a",
    "title": "Solutions",
    "section": "",
    "text": "Écrire un programme qui demande un nombre à l’utilisateur, et l’informe ensuite si ce nombre est positif ou négatif. (Aux fins du présent exercice, le nombre zéro est considéré comme étant positif).\n\n#Solution 1\nnb = int(input(\"Un nombre ? \"))\n\nif nb&lt;0 :\n    print(f\"Le nombre {nb} est négatif\")\nelse :\n    print(f\"Le nombre {nb} est positif\")\n\nUn nombre ? -1\nLe nombre -1 est négatif\n\n\n\n#Solution 2\nnb = int(input(\"Un nombre ? \"))\n\nif nb&lt;0 :\n    msg = \"négatif\"\nelse :\n    msg = \"positif\"\n\nprint(f\"Le nombre {nb} est {msg}\")\n\n# comparer les deux solutions en terme de performance et maintenance du code afin de les sensibiliser \n\nUn nombre ? 0\nLe nombre 0 est positif"
  },
  {
    "objectID": "posts/testing/solutions.html#question-1.b",
    "href": "posts/testing/solutions.html#question-1.b",
    "title": "Solutions",
    "section": "",
    "text": "Écrire un programme qui lit trois nombres entiers nb1, nb2 et nb3, et affiche selon le cas, l’un des trois messages ci-dessous : - Les nombres sont en ordre croissant - Les nombres sont en ordre décroissant - Les nombres sont en désordre\naux fins du présent exércice, ne considérons pas l’éventualité où les valeurs de nb1, nb2 et nb3 puissent être égales les unes aux autres.\n\n#Solution 1\nnb1 = int(input(\"nb 1 ? \"))\nnb2 = int(input(\"nb 2 ? \"))\nnb3 = int(input(\"nb 3 ? \"))\n\nchaine = \"Les nombres sont en \"\nif nb1 &lt; nb2:\n    if nb2 &lt; nb3:\n        chaine += \"ordre croissant\"\n    else:\n        chaine += \"désordre\"\nelse:\n    if nb2 &lt; nb3 :\n        chaine += \"désordre\"\n    else:\n        chaine += \"ordre décroissant\"\n\nprint(chaine)\n\nnb 1 ? 10\nnb 2 ? 20\nnb 3 ? 30\nLes nombres sont en ordre croissant\n\n\n\n#Solution 2\nnb1 = int(input(\"nb 1 ? \"))\nnb2 = int(input(\"nb 2 ? \"))\nnb3 = int(input(\"nb 3 ? \"))\n\nchaine = \"Les nombres sont en \"\nif nb1 &lt; nb2 and nb2 &lt; nb3 :\n    chaine += \"ordre croissant\"\nelif nb1 &gt; nb2 and nb2 &gt; nb3 :\n    chaine += \"ordre décroissant\"\nelse:\n    chaine += \"désordre\"\n\nprint(chaine)\n# comparer les deux solutions en terme de performance et maintenance du code afin de les sensibiliser \n\nnb 1 ? 10\nnb 2 ? 20\nnb 3 ? 30\nLes nombres sont en ordre croissant"
  },
  {
    "objectID": "posts/testing/solutions.html#question-1.c",
    "href": "posts/testing/solutions.html#question-1.c",
    "title": "Solutions",
    "section": "",
    "text": "Écrire un programme qui permet de calculer le résultat de la division de deux nombre entiers nb1 et nb2. Attention lorsque l’utilisateur introduit la valeur 0 pour nb2, on affiche « infini ».\n\n# print(10/0)\n\nnb1 = int(input(\"nb 1 ? \"))\nnb2 = int(input(\"nb 2 ? \"))\n\nif(nb2 == 0) :\n    resultat = \"infinity\"\nelse :\n    resultat = (nb1/nb2)\n\nprint(f\"{nb1} / {nb2} = {resultat}\")\n\nnb 1 ? 10\nnb 2 ? 0\n10 / 0 = infinity"
  },
  {
    "objectID": "posts/testing/solutions.html#question-1.d",
    "href": "posts/testing/solutions.html#question-1.d",
    "title": "Solutions",
    "section": "",
    "text": "Écrire le programme qui après lecture du montant TTC de l’addition, déterminera et affichera le montant du pourboire accordé à un serveur dans un restaurant. Le pourboire doit être de 15% sur le montant HT de l’addition. Le montant du pourboire ne peut être inférieur à 1$.\nNote : TPS = 5%, TVQ = 9.975%\n\n#constantes symboliques / éviter les constances littérales dans le code\nTAUX_TPS       = .05\nTAUX_TVQ       = .09975\nTAUX_POURBOIRE = .15\n\n#variables\nmontantTotal   = float(input(\"Le montant total de la facture ? \"))\nmontantAT      = montantTotal / (1+TAUX_TPS+TAUX_TVQ)\n# print(montantAT)\n\npourboire      = montantAT * TAUX_POURBOIRE\n\nif pourboire &lt; 1 :\n    pourboire = 1\n\nprint(f\"Montant du pourboire : {round(pourboire,2)}\")\nprint(f\"Montant du pourboire : {pourboire:.2f}\") #expliquer la différence\n\nLe montant total de la facture ? 115\nMontant du pourboire : 15.0\nMontant du pourboire : 15.00"
  },
  {
    "objectID": "posts/testing/solutions.html#question-8",
    "href": "posts/testing/solutions.html#question-8",
    "title": "Solutions",
    "section": "Question 8:",
    "text": "Question 8:\nGiovani est un étudiant astucieux en informatique de l’université de Montréal. Afin de sauver un peu de sous, il met à profit ses connaissances algorithmiques en pariant avec ses amis qu’il peut deviner n’importe quel nombre aléatoire, choisi par eux, dans une fourchette allant de 1 à 1 000 000, en utilisant un maximum de 20 essais seulement.\nLe secret de l’astuce de Giovani réside dans l’application d’un procédé ingénieux qui lui permet de réduire le nombre d’essais nécessaires pour deviner le nombre choisi par ses amis (la cible), parmi tous les nombres possible entre 1 et 1 000 000 (la plage)\nLes regles du pari sont les suivantes :\n\nLes ami(e)s de Giovanni choisissent un chiffre aléatoire (cible) entre 1 et 1 000 000 (plage).\nGiovanni essaie de deviner la cible (il à 20 essais maximum) de la manière suivante :\n\n\nSi l’élément du milieu de la plage est égal à la cible, nous avons trouvé le chiffre.\nSi l’élément du milieu de la plage est plus petit que la cible, ses amis lui indique que la cible est plus grande que l’élément choisi et on élimine la moitié gauche de la liste pour se concentrer sur la moitié droite.\nSi l’élément du milieu de la plage est plus grand que la cible, ses amis lui indique que la cible est plus petite que l’élément choisi et on élimine la moitié droite de la liste pour se concentrer sur la moitié gauche.\n\nEn divisant constamment la liste en deux et en comparant l’élément du milieu de la plage avec la cible, Giovanni réduit considérablement le nombre de comparaisons nécessaires pour trouver le numéro cible.\nCodons maintenant cette astuce en partant du code suivant:\n\ndef split_inteligent(plage, cible):\n    left, right = 0, len(plage) - 1\n    count = 0\n    while left &lt;= right:\n        count += 1\n        mid = (left + right) // 2\n        \n        if plage[mid] == cible:\n            return plage[mid], mid, count\n        elif plage[mid] &lt; cible:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return None, -1, count  # Si element non trouvé\n\n\nimport random\n\n# Exemple d'utilisation\nborne_supp = 1_000_000\ncible = random.randint(1, borne_supp)\nplage = list(range(1, borne_supp +1))\nprint(f\"Le chiffre a trouver est {cible}\")\n\nsolution, index, count = split_inteligent(plage, cible)\n\nif index != -1:\n    print(f\"{cible} trouvé à l'index {index} : {solution == cible}. Il a fallu {count} itérations pour trouver l'élément.\")\nelse:\n    print(f\"{cible} n'a pas été trouvé dans la liste.\")\n\nLe chiffre a trouver est 82549\n82549 trouvé à l'index 82548 : True. Il a fallu 15 itérations pour trouver l'élément."
  },
  {
    "objectID": "posts/testing/solutions.html#question-4-v2",
    "href": "posts/testing/solutions.html#question-4-v2",
    "title": "Solutions",
    "section": "Question 4 (v2)",
    "text": "Question 4 (v2)\nVous avez une liste de noms d’étudiants : ['Bob', 'Mary', 'Jane', 'Rick', 'Peter', 'Marge'].\nVotre tâche consiste à utiliser une boucle while pour permettre à l’utilisateur d’essayer autant de fois qu’il le souhaite de rentrer un nom. Vous devez vérifier si le nom entré par l’utilisateur est présent dans la liste d’étudiants (Attention : bob et Bob sont considéré comme étant le même nom, Mary et mary aussi…).\nSi le nom est présent dans la liste, vous devez écrire le message suivant dans un fichier texte nommé prenoms.txt en utilisant la commande with open : &gt; “Le nom &lt;nom_utilisateur&gt; est présent dans la liste d’étudiants”\nSi le nom n’est pas présent dans la liste, vous devez écrire le message suivant dans prenoms.txt: &gt; “Le nom &lt;nom_utilisateur&gt; n’est pas présent dans la liste d’étudiants”\nFinalement, demandez à l’utilisateur s’il souhaite essayer un autre nom. Si oui, continuez la boucle, sinon quittez la boucle.\nVous devez écrire sur le fichier prenoms.txt de tel sorte à garder l’historique des messages de toutes les tentatives.\n\n# Liste des noms d'étudiants\netudiants = ['Bob', 'Mary', 'Jane', 'Rick', 'Peter', 'Marge']\netudiants_lower = [student.lower() for student in etudiants]\n# Utiliser une boucle while pour permettre à l'utilisateur d'essayer plusieurs noms\nwhile True:\n    # Demander à l'utilisateur de rentrer un nom\n    nom_utilisateur = input(\"Entrez un nom : \")\n\n    # Convertir le nom en lettres minuscules\n    nom_utilisateur = nom_utilisateur.lower()\n\n    # Vérifier si le nom est présent dans la liste d'étudiants\n    if nom_utilisateur in etudiants_lower:\n        message = f\"Le nom {nom_utilisateur} est présent dans la liste d'étudiants\"\n    else:\n        message = f\"Le nom {nom_utilisateur} n'est pas présent dans la liste d'étudiants\"\n\n    # Écrire le message dans le fichier prenoms.txt en mode ajout\n    with open(\"prenoms.txt\", \"a\") as fichier:\n        fichier.write(message + '\\n')\n\n    continuer = input(\"Voulez-vous essayer un autre nom ? (oui/non) \")\n    if continuer.lower() != \"oui\":\n        break\n\nprint(\"Opération terminée. Vérifiez le fichier prenoms.txt.\")"
  }
]