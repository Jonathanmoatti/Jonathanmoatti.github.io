[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "The Blog",
    "section": "",
    "text": "Building Agents with Tools Locally\n\n\n\n\n\n\ntutorial\n\n\ncode\n\n\n\nBuilding an AI Agent with tools locally using HuggingFace SmolAgents and Transformers Libraries\n\n\n\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Basics\n\n\n\n\n\n\nnews\n\n\ncode\n\n\n\n\n\n\n\n\n\nFeb 20, 2025\n\n\nJonathan Moatti\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 19, 2025\n\n\nJonathan Moatti\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To Jo’s blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 16, 2025\n\n\nJonathan Moatti\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "note_to_self.html",
    "href": "note_to_self.html",
    "title": "The Gradient Dissident",
    "section": "",
    "text": "command line to resize images : &gt; convert &lt;image_path/image_name.png -resize 1000x1000 new_image_name.png\nexample:\n- convert agents.webp -resize 500x500 thumbnail.webp\n- convert agents.webp -resize 1000x1000 main.webp\n\nClicker sur un lien de fichier present dans le meme dossier post/ (ici un exemple avec requirements.txt de posts/local_agents/) - requirements.txt\nFaire un hover text (et ajouter de la couleur) #| echo: false #| output: asis with open(‘requirements.txt’) as f: requirements = f.read().strip()\nprint(f’You can see which dependencies are used for running this notebook by simply hovering over the following : requirements.txt’)\n\nAjouter de la couleur dans un mots: requirement.txt"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/new_test_post/hello.html",
    "href": "posts/new_test_post/hello.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_moons\n\n# Create figure and axis objects with a single subplot\nplt.figure(figsize=(8, 6))\n\n# Generate the moon-shaped data\nX, y = make_moons(n_samples=200, noise=0.05, random_state=42)\n\n# Create scatter plots with improved styling\nplt.scatter(X[y==0, 0], X[y==0, 1], color='red', label='Class 0', alpha=0.6, edgecolor='darkred')\nplt.scatter(X[y==1, 0], X[y==1, 1], color='blue', label='Class 1', alpha=0.6, edgecolor='darkblue')\n\n# Add labels and title\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Half-moon Classification Dataset')\n\n# Add legend with better positioning\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout to prevent label cutoff\nplt.tight_layout()\n\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Non-linear classification example using half-moon data"
  },
  {
    "objectID": "posts/new_test_post/hello.html#half-moon-classification-example",
    "href": "posts/new_test_post/hello.html#half-moon-classification-example",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_moons\n\n# Create figure and axis objects with a single subplot\nplt.figure(figsize=(8, 6))\n\n# Generate the moon-shaped data\nX, y = make_moons(n_samples=200, noise=0.05, random_state=42)\n\n# Create scatter plots with improved styling\nplt.scatter(X[y==0, 0], X[y==0, 1], color='red', label='Class 0', alpha=0.6, edgecolor='darkred')\nplt.scatter(X[y==1, 0], X[y==1, 1], color='blue', label='Class 1', alpha=0.6, edgecolor='darkblue')\n\n# Add labels and title\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Half-moon Classification Dataset')\n\n# Add legend with better positioning\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Add grid for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout to prevent label cutoff\nplt.tight_layout()\n\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Non-linear classification example using half-moon data"
  },
  {
    "objectID": "posts/local_agents/local_agent.html",
    "href": "posts/local_agents/local_agent.html",
    "title": "Building Agents with Tools Locally",
    "section": "",
    "text": "Cyberpunk Agent"
  },
  {
    "objectID": "posts/local_agents/local_agent.html#building-open-source-agents-using-huggingfaces-smolagents",
    "href": "posts/local_agents/local_agent.html#building-open-source-agents-using-huggingfaces-smolagents",
    "title": "Building Agents with Tools Locally",
    "section": "Building Open Source Agents using HuggingFace’s SmolAgents",
    "text": "Building Open Source Agents using HuggingFace’s SmolAgents\nTo monitor GPU utilization in real-time, especially when running resource-intensive machine learning tasks, you can leverage the nvidia-smi command. On Ubuntu, simply uncomment and execute the following command in your terminal (provided that you have an Nvidia GPU):\nwatch -n 1 nvidia-smi\nThis command offers a live, updating snapshot of your GPU’s performance, enabling you to monitor key metrics such as memory utilization and temperature. The watch -n 1 component ensures that this information is refreshed every second. This is particularly useful for debugging, optimizing your machine learning workflows, and identifying specific commands or models that lead to critical “Out Of Memory” errors.\n\nImports & Setup\nIn this initial code block, we start by importing the necessary libraries to construct our local AI agent. Let’s break down each import:\n\ntyping: We import Any from the typing module to provide type hints for our function signatures, which is a critical part of creating useful tools that our agents that use.\nsmolagents: From the smolagents library, we import:\n\nTool: A base class for defining custom tools that our agent can use.\nCodeAgent: The core class for creating agents capable of generating and executing code.\nTransformersModel: A class to load and manage transformer models.\ntool: A decorator to easily register functions as tools for the agent.\nDuckDuckGoSearchTool: A pre-built tool that allows the agent to perform web searches using DuckDuckGo.\n\ntransformers: We import AutoTokenizer from the transformers library, which will be used to process text data for our models.\nyaml: This library is imported to handle YAML configuration files, allowing us to define agent settings in a structured format.\nyfinance: We import yfinance to fetch stock market data.\ndatetime and pytz: These are used for handling date and time information, which will be useful when working with financial data.\n\nThese imports set the stage for building a powerful AI agent that can interact with its environment through code execution and web searches.\nYou can see which dependencies are used for running this notebook by either simply hovering over requirements.txt or by visiting this blog post’s GitHub page and accessing the file.\n\n\nCode\nfrom typing import Any\nfrom smolagents.tools import Tool\nfrom smolagents import CodeAgent, TransformersModel, tool, DuckDuckGoSearchTool\nfrom transformers import AutoTokenizer\nimport yaml\n\nimport yfinance as yf\nfrom datetime import datetime\nimport pytz\n\n\n\n\nDefine your prompt template\nLoad up the adequate yaml prompt template. This one is compatible with the smolagents library and the model we will use. It was taken directly from HuggingFace’s Agents Course\n\n\nCode\n# Setting up the predefined prompts\nwith open(\"prompts.yaml\", 'r') as stream:\n    prompt_templates = yaml.safe_load(stream)\n\n\n\n\nUnderstanding AI Tool Creation with SmolAgents\nWhen building AI agents, defining tools properly is crucial for ensuring smooth integration with frameworks like SmolAgents.\nThe first tool we will build today uses the yfinance library to check the status (price) of a given ticker on the North American stock market.\n\nCreating your first tool\nThe function check_NA_market_status is decorated with @tool, marking it as a callable tool within the agent framework. This tool checks whether the stock market is open and returns the latest stock price if open, or the last closing price if closed.\n\nAppropriate type-hinting is Essential\n\nThe function takes a single string argument (ticker: str) and returns a string (-&gt; str).\n\nThis typing ensures that the agent understands the expected input and output format.\n\nWithout this, the function may not work correctly in an AI pipeline.\n\nThe Importance of a Docstring\n\nThe function is documented with a clear, structured docstring explaining:\n\nWhat it does (checks if the market is open and returns the appropriate stock price).\n\nWhat arguments it takes (ticker – the stock ticker symbol).\n\nWhat it returns (a formatted string with market status and price).\n\n\nAI agents rely on this information to understand the function’s role. When/if you build your own tool, it is critical to keep the same docstring template for your code to be compatible with the smolagents library.\n\n\n\nKey Takeaways for developping tools\n\nFollow the function template: Use clear type hints and structured docstrings.\n\nEnsure proper decoration: The @tool decorator registers the function within the SmolAgents framework.\n\nKeep return types simple: AI models parse these results, so returning formatted strings helps with interpretability.\n\nThis structured approach makes it easier for Agents to call tools correctly, understand their functions, and use them effectively in reasoning and decision-making.\n\n\nCode\nfrom smolagents import tool\n# first tool\n@tool\ndef check_NA_market_status(ticker: str) -&gt; str:\n    \"\"\"\n    A tool that checks if the stock market is open for the given ticker and returns the current price if open,\n    or the previous close price if the market is closed.\n    Args:\n        ticker: The stock ticker symbol (e.g., 'AAPL', 'GOOG').\n    Returns:\n        A message indicating whether the market is open or closed, \n        and the price of the stock at the respective time.\n    \"\"\"\n\n    # Get the current time in Eastern Time Zone\n    eastern = pytz.timezone('US/Eastern')\n    now = datetime.now(eastern)\n    current_time = now.time()\n    current_day = now.weekday()  # Monday is 0 and Sunday is 6\n\n    market_open_time = datetime.strptime(\"09:30:00\", \"%H:%M:%S\").time()\n    market_close_time = datetime.strptime(\"16:00:00\", \"%H:%M:%S\").time()\n\n    if current_day &lt; 5 and market_open_time &lt;= current_time &lt;= market_close_time:\n        stock = yf.Ticker(ticker)\n        # Request intraday data: 1-day period with 1-minute interval\n        current_price = stock.history(period=\"1d\", interval=\"1m\")['Close'].iloc[-1]\n        return f\"Market is open. Current price of {ticker}: ${current_price:.2f}\"\n    else:\n        stock = yf.Ticker(ticker)\n        previous_close = stock.history(period=\"1d\")['Close'].iloc[-1]\n        return f\"Market is closed. Previous close price of {ticker}: ${previous_close:.2f}\"\n\n\n\n\n\n\n\nBypassing LLM’s mathematical computation limitations\nThe fibonacci_tool function is a custom tool designed to compute the nth Fibonacci number. It is decorated with @tool, which allows it to be seamlessly integrated into an AI agent using the SmolAgents framework.\nLLMs, while powerful, often struggle with mathematical computations, especially recursive sequences like Fibonacci numbers. Instead of relying on the LLM’s built-in reasoning (which often returns erroneous results even with the most powerful models like GPT-4o and o1 try it for yourself), this tool:\n\nProvides a deterministic and accurate calculation of Fibonacci numbers.\nIs significantly more efficient than recursive implementations, using an iterative approach to avoid excessive function calls.\nEnsures the AI agent always returns correct numerical results rather than relying on approximate or hallucinated values. \n\n\n\nCode\n# second tool\n@tool\ndef fibonacci_tool(n: int) -&gt; int:\n    \"\"\"\n    A simple tool that returns the nth Fibonacci number.\n\n    Args:\n        n: The index of the Fibonacci sequence to retrieve (int)\n\n    Returns:\n        int: The nth Fibonacci number.\n    \"\"\"\n    if n &lt;= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n\n\n\nBypassing the LLM’s training date cutoff\nFinally, we create a tool that leverages DuckDuckGoSearch to fetch up-to-date information from the web.\nThis tool empowers our agent with the ability to quickly retrieve relevant information on demand. Since models training have cutoff dates, this tool will allow us to bypass this cutoff limitation by researching the web for up to date answers to any query we may have.\n\n\nCode\n# third tool\n@tool\ndef duckduckgo_search(query: str) -&gt; str:\n    \"\"\"\n    A tool that performs a real-time DuckDuckGo search for the given query and returns the top results.\n    \n    Args:\n        query: The search query string (e.g., \"Latest AI research 2025\").\n        \n    Returns:\n        A string containing the search results. If the search tool returns a formatted string,\n        it is returned directly; otherwise, if it returns a list of dictionaries with 'title' and 'url'\n        keys, the results are formatted for readability.\n    \"\"\"\n    search_tool = DuckDuckGoSearchTool()\n    results = search_tool(query)\n    \n    if isinstance(results, str):\n        return results\n    \n    formatted_results = \"\\n\".join(\n        [f\"{item.get('title', 'No Title')} -&gt; {item.get('url', 'No URL')}\" for item in results]\n    )\n    return formatted_results\n\n\n\n\nUnderstanding the Final Answer Tool in AI Agents\nThe FinalAnswerTool is a specialized tool used in AI agent frameworks to consolidate the reasoning process and provide a definitive response. Unlike other tools that fetch data or perform computations, this tool acts as a final step where the AI commits to a structured output.\n\nWhy This Tool Is Important for AI Agents\nAI agents often go through multi-step reasoning before arriving at an answer. The FinalAnswerTool helps in:\n\nEnsuring a structured final response\n\nInstead of returning intermediate steps, the agent commits to a well-defined answer.\n\nImproving interpretability\n\nBy using a dedicated final output tool, responses become more consistent and easier to process.\n\nIntegrating seamlessly into pipelines\n\nMany agent frameworks expect a clear final output format—this tool standardizes the output handling.\n\n\nWhen designing AI agents, tools like this help bridge the gap between reasoning and action, making interactions smoother and more reliable.\n\n\nCode\n# final answer class tool used after reasoning\nclass FinalAnswerTool(Tool):\n    name = \"final_answer\"\n    description = \"Provides a final answer to the given problem.\"\n    inputs = {'answer': {'type': 'any', 'description': 'The final answer to the problem'}}\n    output_type = \"any\"\n\n    def forward(self, answer: Any) -&gt; Any:\n        return answer\n\n    def __init__(self, *args, **kwargs):\n        self.is_initialized = False\n\n# instanciate tool\nfinal_answer = FinalAnswerTool()\n\n\n\n\n\nPicking our LLM and initializing it.\nTo instanciate our agent, we must first create a model instance by setting up a specific TransformersModel and its tokenizer (with CUDA enabled and controlled token limits).\n\n\nCode\n# pick a model and instanciate it\n# model_name= \"HuggingFaceTB/SmolLM2-360M-Instruct\"\nmodel_name=\"HuggingFaceTB/SmolLM2-1.7B-Instruct\"\n# model_name = \"HuggingFaceTB/SmolLM-135M-Instruct\"\nmodel = TransformersModel(model_id=model_name, device_map=\"auto\", max_new_tokens=200)\n\n\n\n\nCreating an AI Agent with Custom Tools\nNow that we’ve built our individual tools, the next step is assembling them into an AI agent. This is done using the CodeAgent class, which takes a language model (model), a set of tools, and other parameters to define its behavior.\nKey Components of the AI Agent:\n\nModel (model) – The LLM that powers the agent’s reasoning and decision-making.\nTools (tools) – A list of functions the agent can use to extend its capabilities.\nMax Steps (max_steps=6) – Limits how many steps the agent can take before finalizing an answer.\nVerbosity (verbosity_level=1) – Controls the level of detail in logs/debugging output.\nPrompt Templates (prompt_templates) – Provides structured instructions for the agent’s behavior.\n\n\n\nCode\n# finaly, create the agent and pass the model, tools, number of steps it should reflect for, prompt template...ect\n\nagent = CodeAgent(\n    model=model,\n    tools=[final_answer,fibonacci_tool, check_NA_market_status, duckduckgo_search], ## add your tools here (don't remove final answer)\n    max_steps=6,\n    verbosity_level=1,\n    grammar=None,\n    planning_interval=None,\n    name=None,\n    description=None,\n    prompt_templates=prompt_templates\n)\n\n\nFinally, we query our agent by passing in our queries to the .run() method.\n\n\nCode\nprint(\"CodeAgent:\", agent.run(\"Could you give me the 118th number in the Fibonacci sequence?\"))\n\n\n╭──────────────────────────────────────────────────── New run ────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Could you give me the 118th number in the Fibonacci sequence?                                                   │\n│                                                                                                                 │\n╰─ TransformersModel - HuggingFaceTB/SmolLM2-1.7B-Instruct ───────────────────────────────────────────────────────╯\n\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Step 1 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n\n ─ Executing parsed code: ──────────────────────────────────────────────────────────────────────────────────────── \n  answer = fibonacci_tool(n=118)                                                                                   \n  final_answer(answer)                                                                                             \n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n\n\n\nOut - Final answer: 2046711111473984623691759\n\n\n\n[Step 0: Duration 4.45 seconds| Input tokens: 2,511 | Output tokens: 63]\n\n\n\nCodeAgent: 2046711111473984623691759\n\n\n\n\nCode\nprint(\"CodeAgent:\", agent.run(\"Could you give me the current market price of the stock VEQT.TO?\"))\n\n\n╭──────────────────────────────────────────────────── New run ────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Could you give me the current market price of the stock VEQT.TO?                                                │\n│                                                                                                                 │\n╰─ TransformersModel - HuggingFaceTB/SmolLM2-1.7B-Instruct ───────────────────────────────────────────────────────╯\n\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Step 1 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n\n ─ Executing parsed code: ──────────────────────────────────────────────────────────────────────────────────────── \n  ticker = \"VEQT.TO\"                                                                                               \n  current_price = check_NA_market_status(ticker=ticker)                                                            \n  final_answer(current_price)                                                                                      \n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n\n\n\nOut - Final answer: Market is open. Current price of VEQT.TO: $46.64\n\n\n\n[Step 0: Duration 6.54 seconds| Input tokens: 2,512 | Output tokens: 102]\n\n\n\nCodeAgent: Market is open. Current price of VEQT.TO: $46.64\n\n\n\n\nCode\nprint(\"CodeAgent:\", agent.run(\"Could you search the web for the latest AI research in 2025\"))\n\n\n╭──────────────────────────────────────────────────── New run ────────────────────────────────────────────────────╮\n│                                                                                                                 │\n│ Could you search the web for the latest AI research in 2025                                                     │\n│                                                                                                                 │\n╰─ TransformersModel - HuggingFaceTB/SmolLM2-1.7B-Instruct ───────────────────────────────────────────────────────╯\n\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Step 1 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n\n ─ Executing parsed code: ──────────────────────────────────────────────────────────────────────────────────────── \n  query = \"Latest AI research 2025\"                                                                                \n  answer = duckduckgo_search(query=query)                                                                          \n  final_answer(answer)                                                                                             \n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n\n\n\nOut - Final answer: ## Search Results\n\n[The 10 Biggest AI Trends Of 2025 Everyone Must Be Ready For Today - \nForbes](https://www.forbes.com/sites/bernardmarr/2024/09/24/the-10-biggest-ai-trends-of-2025-everyone-must-be-ready\n-for-today/)\nDiscover the 10 major AI trends set to reshape 2025: from augmented working and real-time decision-making to \nadvanced AI legislation and sustainable AI initiatives.\n\n[AI in the workplace: A report for 2025 | McKinsey - McKinsey & \nCompany](https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/superagency-in-the-workplace-empowerin\ng-people-to-unlock-ais-full-potential-at-work)\nArtificial intelligence has arrived in the workplace and has the potential to be as transformative as the steam \nengine was to the 19th-century Industrial Revolution. 1 \"Gen AI: A cognitive industrial revolution,\" McKinsey, June\n7, 2024. With powerful and capable large language models (LLMs) developed by Anthropic, Cohere, Google, Meta, \nMistral, OpenAI, and others, we have entered a new ...\n\n[Artificial Intelligence | Stanford Emerging Technology \nReview](https://setr.stanford.edu/technology/artificial-intelligence/2025)\n• Artificial intelligence (AI) is a foundational technology that is supercharging other scientific fields and, like\nelectricity and the internet, has the potential to transform societies, economies, and politics worldwide. ... \nResearch on foundational AI technologies is difficult to regulate, even among likeminded nations. It is even more \n...\n\n[What's next for AI in 2025 - MIT Technology \nReview](https://www.technologyreview.com/2025/01/08/1109188/whats-next-for-ai-in-2025/)\nAI model makers are also keen to pitch their generative products as research tools for scientists. OpenAI let \nscientists test its latest o1 model and see how it might support them in research. The ...\n\n[Top 15 AI Trends for 2025: Expert Predictions You Need to \nKnow](https://techstartups.com/2025/01/01/top-15-ai-trends-for-2025-expert-predictions-you-need-to-know/)\n3. Open-Source AI Gains Momentum Last week, we wrote about how Deepseek outperformed OpenAI and Meta's latest \nmodels at a fraction of the cost.Deepseek, a free open-source AI model developed by a Chinese tech startup, \nexemplifies a growing trend in open-source AI, where accessible tools are pushing the boundaries of performance and\naffordability.\n\n[Five Trends in AI and Data Science for 2025 - MIT Sloan Management \nReview](https://sloanreview.mit.edu/article/five-trends-in-ai-and-data-science-for-2025/)\nBut we will incorporate the latest research whenever possible. Randy has just completed his annual survey of data, \nanalytics, and AI executives, the 2025 AI & Data Leadership Executive Benchmark Survey, conducted by his \neducational firm, Data & AI Leadership Exchange; and Tom has worked on several surveys on generative AI and data, \ntechnology ...\n\n[Artificial Intelligence News -- \nScienceDaily](https://www.sciencedaily.com/news/computers_math/artificial_intelligence/)\nJan. 15, 2025 — A new initiative is challenging the conversation around the direction of artificial intelligence \n(AI). It charges that the current trajectory is inherently biased against non ...\n\n[AI Advancements in 2025: The Next Big Innovations to \nWatch](https://techresearchs.com/artificial-intelligence/ai-advancements-in-2025-the-next-big-innovations-to-watch/\n)\nArtificial Intelligence (AI) continues to evolve, reshaping industries and daily life. In 2025, AI advancements \nwill bring groundbreaking innovations, enhancing automation, decision-making, and problem-solving across various \nsectors. This article explores the latest AI advancements in 2025, their applications, and their transformative \nimpact on businesses and society.\n\n[10 Artificial Intelligence Trends in 2025 To Stay \nAhead](https://northwest.education/insights/artificial-intelligence/10-top-artificial-intelligence-trends-to-stay-a\nhead/)\n10 AI trends that will define 2025. The following trends highlight how artificial intelligence 2025 will drive \ninnovation and redefine industries: AI-powered cybersecurity. Cybersecurity threats are becoming increasingly \nsophisticated. AI-powered solutions will play a pivotal role in detecting vulnerabilities, predicting attacks, and \nautomating ...\n\n[5 Predictions for AI in 2025 - TIME](https://time.com/7204665/ai-predictions-2025/)\nDavos 2025: New Horizons. 5 Predictions for AI in 2025. 4 minute read. Illustration by Tara Jacoby for TIME. By \nTharin Pillay and Harry Booth. ... Here's what to expect from AI in 2025.\n\n\n\n[Step 0: Duration 6.77 seconds| Input tokens: 2,510 | Output tokens: 82]\n\n\n\nCodeAgent: ## Search Results\n\n[The 10 Biggest AI Trends Of 2025 Everyone Must Be Ready For Today - Forbes](https://www.forbes.com/sites/bernardmarr/2024/09/24/the-10-biggest-ai-trends-of-2025-everyone-must-be-ready-for-today/)\nDiscover the 10 major AI trends set to reshape 2025: from augmented working and real-time decision-making to advanced AI legislation and sustainable AI initiatives.\n\n[AI in the workplace: A report for 2025 | McKinsey - McKinsey & Company](https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/superagency-in-the-workplace-empowering-people-to-unlock-ais-full-potential-at-work)\nArtificial intelligence has arrived in the workplace and has the potential to be as transformative as the steam engine was to the 19th-century Industrial Revolution. 1 \"Gen AI: A cognitive industrial revolution,\" McKinsey, June 7, 2024. With powerful and capable large language models (LLMs) developed by Anthropic, Cohere, Google, Meta, Mistral, OpenAI, and others, we have entered a new ...\n\n[Artificial Intelligence | Stanford Emerging Technology Review](https://setr.stanford.edu/technology/artificial-intelligence/2025)\n• Artificial intelligence (AI) is a foundational technology that is supercharging other scientific fields and, like electricity and the internet, has the potential to transform societies, economies, and politics worldwide. ... Research on foundational AI technologies is difficult to regulate, even among likeminded nations. It is even more ...\n\n[What's next for AI in 2025 - MIT Technology Review](https://www.technologyreview.com/2025/01/08/1109188/whats-next-for-ai-in-2025/)\nAI model makers are also keen to pitch their generative products as research tools for scientists. OpenAI let scientists test its latest o1 model and see how it might support them in research. The ...\n\n[Top 15 AI Trends for 2025: Expert Predictions You Need to Know](https://techstartups.com/2025/01/01/top-15-ai-trends-for-2025-expert-predictions-you-need-to-know/)\n3. Open-Source AI Gains Momentum Last week, we wrote about how Deepseek outperformed OpenAI and Meta's latest models at a fraction of the cost.Deepseek, a free open-source AI model developed by a Chinese tech startup, exemplifies a growing trend in open-source AI, where accessible tools are pushing the boundaries of performance and affordability.\n\n[Five Trends in AI and Data Science for 2025 - MIT Sloan Management Review](https://sloanreview.mit.edu/article/five-trends-in-ai-and-data-science-for-2025/)\nBut we will incorporate the latest research whenever possible. Randy has just completed his annual survey of data, analytics, and AI executives, the 2025 AI & Data Leadership Executive Benchmark Survey, conducted by his educational firm, Data & AI Leadership Exchange; and Tom has worked on several surveys on generative AI and data, technology ...\n\n[Artificial Intelligence News -- ScienceDaily](https://www.sciencedaily.com/news/computers_math/artificial_intelligence/)\nJan. 15, 2025 — A new initiative is challenging the conversation around the direction of artificial intelligence (AI). It charges that the current trajectory is inherently biased against non ...\n\n[AI Advancements in 2025: The Next Big Innovations to Watch](https://techresearchs.com/artificial-intelligence/ai-advancements-in-2025-the-next-big-innovations-to-watch/)\nArtificial Intelligence (AI) continues to evolve, reshaping industries and daily life. In 2025, AI advancements will bring groundbreaking innovations, enhancing automation, decision-making, and problem-solving across various sectors. This article explores the latest AI advancements in 2025, their applications, and their transformative impact on businesses and society.\n\n[10 Artificial Intelligence Trends in 2025 To Stay Ahead](https://northwest.education/insights/artificial-intelligence/10-top-artificial-intelligence-trends-to-stay-ahead/)\n10 AI trends that will define 2025. The following trends highlight how artificial intelligence 2025 will drive innovation and redefine industries: AI-powered cybersecurity. Cybersecurity threats are becoming increasingly sophisticated. AI-powered solutions will play a pivotal role in detecting vulnerabilities, predicting attacks, and automating ...\n\n[5 Predictions for AI in 2025 - TIME](https://time.com/7204665/ai-predictions-2025/)\nDavos 2025: New Horizons. 5 Predictions for AI in 2025. 4 minute read. Illustration by Tara Jacoby for TIME. By Tharin Pillay and Harry Booth. ... Here's what to expect from AI in 2025."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To Jo’s blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the Dissension",
    "section": "",
    "text": "👋 Hey there! I’m Jonathan. Passionate about artificial intelligence and data science, I love exploring the intersection between academic research and real-world applications. My journey has led me to work in AI R&D in North America’s largest financial cooperative (Desjardins), tackling exciting topics like recommendation systems, reinforcement learning, graph neural networks, and self-supervised learning. But beyond algorithms, what truly drives me is sharing knowledge.\nThat’s why I started The Gradient Dissident—a blog where I go from exploring entry-level ideas to breaking down complex AI concepts, all while sharing my thoughts on the field, and maybe, just maybe, challenging conventional wisdom along the way. Why the name? Well, machine learning aficionados are quite familiar with a certain algorithm that methodically fine-tunes models step by step… But me? I like to question, challenge, and sometimes outright disagree with the status quo—hence The Gradient Dissident. A little irreverence never hurt anyone, right? 😄\nI’ve had the opportunity to teach programming at the HEC Montreal and develop advanced AI training programs. My goal? To make complex concepts accessible and help students, as well as professionals navigate this ever-evolving field. I thrive on bridging the gap between theory and practice, supporting learners of all levels in mastering machine learning.\nSo, whether you’re here out of curiosity, passion, or professional interest, welcome to The Gradient Dissident! Expect deep dives, fresh insights, and the occasional rebellious take on AI. 🚀\nStart Reading"
  }
]